{"uid":"896ba165809e29c1","name":"test_post_empty_book_rejected","fullName":"tests.test_contracts#test_post_empty_book_rejected","historyId":"7f9e37c690dcb9b283db01f180233974","time":{"start":1752028528234,"stop":1752028528825,"duration":591},"description":"\nThis test intentionally sends an invalid book structure - empty json payload \nIt should fail with HTTP 400 (Bad Request)\nbut the system currently creates a book with null/zero fields\n","descriptionHtml":"<p>This test intentionally sends an invalid book structure - empty json payload<br />\nIt should fail with HTTP 400 (Bad Request)<br />\nbut the system currently creates a book with null/zero fields</p>\n","status":"skipped","statusMessage":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","statusTrace":"@allure.epic(\"Book API Contracts\")\n    @allure.feature(\"Book Schema Validation\")\n    @allure.story(\"US-4: Contract enforcement for book creation\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    This test intentionally sends an invalid book structure - empty json payload\n    It should fail with HTTP 400 (Bad Request)\n    but the system currently creates a book with null/zero fields\n    \"\"\")\n    @pytest.mark.xfail(reason=\"Known issue: backend accepts empty book payload (should be 400).\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.link(\"https://github.com/vpaikina/qa-portfolio/blob/main/bug%20report.md\",\n                 name=\"Bug: [API_Contract] API allows POST /books with empty body (expected 400, got 200).\")\n    @pytest.mark.contract\n    def test_post_empty_book_rejected():\n        invalid_book = {}\n        with allure.step(\"Send POST /books with empty JSON payload\"):\n>           post_resp = external_api.post(\"/books\", json=invalid_book, expected_status=400)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_contracts.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils/api_client.py:58: in post\n    return self.request(\"POST\", endpoint, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.api_client.APIClient object at 0x10e35a3c0>, method = 'POST', endpoint = '/books', expected_status = 400, error_message = None, kwargs = {'json': {}}\nurl = 'https://fakerestapi.azurewebsites.net/api/v1/books', response = <Response [200]>\nbase_msg = 'Expected status 400, got 200\\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}'\n\n    def request(\n            self,\n            method: str,\n            endpoint: str,\n            expected_status: int = 200,\n            error_message: str = None,\n            **kwargs\n    ) -> requests.Response:\n        url = self._build_url(endpoint)\n        self._log_request(method, url, **kwargs)\n        response = self.session.request(method=method, url=url, **kwargs)\n        self._log_response(response)\n        if response.status_code != expected_status:\n            base_msg = (\n                f\"Expected status {expected_status}, got {response.status_code}\\n\"\n                f\"URL: {url}\\n\"\n                f\"Response: {getattr(response, 'text', '')}\"\n            )\n            if error_message:\n                base_msg = f\"{error_message}\\n{base_msg}\"\n>           raise AssertionError(base_msg)\nE           AssertionError: Expected status 400, got 200\nE           URL: https://fakerestapi.azurewebsites.net/api/v1/books\nE           Response: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}\n\nutils/api_client.py:51: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1752028528176,"stop":1752028528177,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\nThis test intentionally sends an invalid book structure - empty json payload \nIt should fail with HTTP 400 (Bad Request)\nbut the system currently creates a book with null/zero fields\n","status":"skipped","statusMessage":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","statusTrace":"@allure.epic(\"Book API Contracts\")\n    @allure.feature(\"Book Schema Validation\")\n    @allure.story(\"US-4: Contract enforcement for book creation\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.description(\"\"\"\n    This test intentionally sends an invalid book structure - empty json payload\n    It should fail with HTTP 400 (Bad Request)\n    but the system currently creates a book with null/zero fields\n    \"\"\")\n    @pytest.mark.xfail(reason=\"Known issue: backend accepts empty book payload (should be 400).\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.link(\"https://github.com/vpaikina/qa-portfolio/blob/main/bug%20report.md\",\n                 name=\"Bug: [API_Contract] API allows POST /books with empty body (expected 400, got 200).\")\n    @pytest.mark.contract\n    def test_post_empty_book_rejected():\n        invalid_book = {}\n        with allure.step(\"Send POST /books with empty JSON payload\"):\n>           post_resp = external_api.post(\"/books\", json=invalid_book, expected_status=400)\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_contracts.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils/api_client.py:58: in post\n    return self.request(\"POST\", endpoint, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.api_client.APIClient object at 0x10e35a3c0>, method = 'POST', endpoint = '/books', expected_status = 400, error_message = None, kwargs = {'json': {}}\nurl = 'https://fakerestapi.azurewebsites.net/api/v1/books', response = <Response [200]>\nbase_msg = 'Expected status 400, got 200\\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}'\n\n    def request(\n            self,\n            method: str,\n            endpoint: str,\n            expected_status: int = 200,\n            error_message: str = None,\n            **kwargs\n    ) -> requests.Response:\n        url = self._build_url(endpoint)\n        self._log_request(method, url, **kwargs)\n        response = self.session.request(method=method, url=url, **kwargs)\n        self._log_response(response)\n        if response.status_code != expected_status:\n            base_msg = (\n                f\"Expected status {expected_status}, got {response.status_code}\\n\"\n                f\"URL: {url}\\n\"\n                f\"Response: {getattr(response, 'text', '')}\"\n            )\n            if error_message:\n                base_msg = f\"{error_message}\\n{base_msg}\"\n>           raise AssertionError(base_msg)\nE           AssertionError: Expected status 400, got 200\nE           URL: https://fakerestapi.azurewebsites.net/api/v1/books\nE           Response: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}\n\nutils/api_client.py:51: AssertionError","steps":[{"name":"Send POST /books with empty JSON payload","time":{"start":1752028528234,"stop":1752028528819,"duration":585},"status":"failed","statusMessage":"AssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}\n","statusTrace":"  File \"/Users/vera/PycharmProjects/book-library-api-tests/tests/test_contracts.py\", line 51, in test_post_empty_book_rejected\n    post_resp = external_api.post(\"/books\", json=invalid_book, expected_status=400)\n  File \"/Users/vera/PycharmProjects/book-library-api-tests/utils/api_client.py\", line 58, in post\n    return self.request(\"POST\", endpoint, **kwargs)\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/vera/PycharmProjects/book-library-api-tests/utils/api_client.py\", line 51, in request\n    raise AssertionError(base_msg)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"270995bfec2e4bac","name":"stdout","source":"270995bfec2e4bac.txt","type":"text/plain","size":233}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"severity","value":"critical"},{"name":"epic","value":"Book API Contracts"},{"name":"story","value":"US-4: Contract enforcement for book creation"},{"name":"feature","value":"Book Schema Validation"},{"name":"tag","value":"contract"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_contracts"},{"name":"host","value":"MacBook-Air-Vera.local"},{"name":"thread","value":"88342-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_contracts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Bug: [API_Contract] API allows POST /books with empty body (expected 400, got 200).","url":"https://github.com/vpaikina/qa-portfolio/blob/main/bug%20report.md","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[],"history":{"statistic":{"failed":2,"broken":0,"skipped":15,"passed":0,"unknown":0,"total":17},"items":[{"uid":"ecee39a588cb4c1d","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1752028476105,"stop":1752028476829,"duration":724}},{"uid":"6fade752b35b5ce4","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1752028008117,"stop":1752028008862,"duration":745}},{"uid":"ebbdb9c1b89b47bf","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751900345627,"stop":1751900346199,"duration":572}},{"uid":"d26199ce2b1aac4a","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751897999475,"stop":1751898000132,"duration":657}},{"uid":"f5b79f1e2ce4b727","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751897125971,"stop":1751897126582,"duration":611}},{"uid":"d1d95072ca7bd14f","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751897019657,"stop":1751897020272,"duration":615}},{"uid":"8c3eec297750dac0","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751895801737,"stop":1751895802364,"duration":627}},{"uid":"87cba7319c06b61f","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751895617584,"stop":1751895618284,"duration":700}},{"uid":"1eb5c5abdb4ddd3","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751895223218,"stop":1751895223816,"duration":598}},{"uid":"987d1b66ffc9e538","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751894050989,"stop":1751894051644,"duration":655}},{"uid":"cb6e80a3f350ac59","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751891024597,"stop":1751891025239,"duration":642}},{"uid":"7fac57e591ef4119","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751829726807,"stop":1751829727419,"duration":612}},{"uid":"f181360a4bb73dbd","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751661297839,"stop":1751661299468,"duration":1629}},{"uid":"cedf93fafe0236ed","status":"skipped","statusDetails":"XFAIL Known issue: backend accepts empty book payload (should be 400).\n\nAssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751660303763,"stop":1751660305394,"duration":1631}},{"uid":"5319c3e3694dfa5d","status":"failed","statusDetails":"AssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751650670795,"stop":1751650672447,"duration":1652}},{"uid":"19afb01083b8684","status":"failed","statusDetails":"AssertionError: Expected status 400, got 200\nURL: https://fakerestapi.azurewebsites.net/api/v1/books\nResponse: {\"id\":0,\"title\":null,\"description\":null,\"pageCount\":0,\"excerpt\":null,\"publishDate\":\"0001-01-01T00:00:00\"}","time":{"start":1751649886116,"stop":1751649888055,"duration":1939}}]},"tags":["contract"]},"source":"896ba165809e29c1.json","parameterValues":[]}